for (g in graph_asd_list_no_bonferroni){
f_plot(g,name=paste("images_asd/asd_2_person_",m,"_no_bonferroni.png",sep=""),width_edges = 1)
m=m+1
}
m=1
for (g in graph_td_list_no_bonferroni){
f_plot(g,name=paste("images_td/td_2_person_",m,"_no_bonferroni.png",sep=""),width_edges = 1)
m=m+1
}
seq(1:12, replace=T)
sample(1:12, 12, replace=T)
asd
lista1 = lista(1,2,3)
lista1 = list(1,2,3)
lista1
lista1[[c(1,2)]]
lista1[c(1,2)]
new_asd <- asd_sel[pick_sample_asd]
pick_sample_asd <- sample(1:12, 12, replace=T)
pick_sample_td <- sample(1:12, 12, replace=T)
new_asd <- asd_sel[pick_sample_asd]
new_td <- td_sel[pick_sample_td]
new_td
length(new_td)
pick_sample_asd <- sample(1:12, 12, replace=T)
pick_sample_td <- sample(1:12, 12, replace=T)
boost_asd <- do.call(rbind,asd_sel[pick_sample_asd])
boost_td <- do.call(rbind,td_sel[pick_sample_td])
boost_asd_cor <- cor(boost_asd)
boost_td_cor <- cor(boost_td)
boost_delta <- boost_asd_cor - boost_td_cor
boost_delta
S <- 10^3
boost_delta_res <- list()
for (i in 1:S){
pick_sample_asd <- sample(1:12, 12, replace=T)
pick_sample_td <- sample(1:12, 12, replace=T)
boost_asd <- do.call(rbind,asd_sel[pick_sample_asd])
boost_td <- do.call(rbind,td_sel[pick_sample_td])
boost_asd_cor <- cor(boost_asd)
boost_td_cor <- cor(boost_td)
boost_delta <- boost_asd_cor - boost_td_cor
boost_delta_res <- append(boost_delta_res, boost_delta)
}
S <- 250
boost_delta_res <- list()
for (i in 1:S){
pick_sample_asd <- sample(1:12, 12, replace=T)
pick_sample_td <- sample(1:12, 12, replace=T)
boost_asd <- do.call(rbind,asd_sel[pick_sample_asd])
boost_td <- do.call(rbind,td_sel[pick_sample_td])
boost_asd_cor <- cor(boost_asd)
boost_td_cor <- cor(boost_td)
boost_delta <- boost_asd_cor - boost_td_cor
boost_delta_res <- append(boost_delta_res, boost_delta)
if (i%%100 == 0) print(i)
}
myfun_CI <- function(datax, alpha){
# quantile
return(quantile(datax, c(alpha/2, 1-alpha/2)))
}
myfun_CI(sample(1:100, 10000, replace=T), 0.05)
hist(sample(1:100, 10000, replace=T))
myfun_CI(rnorm(0,1), 0.05)
myfun_CI(rnorm(0,1, 10000), 0.05)
myfun_CI(rnorm(100000,0,1), 0.05)
myfun_CI(rnorm(100000,5,1), 0.05)
myfun_CI(rnorm(100000,2,1), 0.05)
myfun_CI(rnorm(100000,2,1), 0.005)
myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), .68)
install.packages("tensorr")
# we have decided to stick with 12 people in each bootstrap, in order
# to maintain lower the variance (ADD THIS COMMENT)
library(tensorr)
myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), .68)
# we have decided to stick with 12 people in each bootstrap, in order
# to maintain lower the variance (ADD THIS COMMENT)
library(tensorr)
S <- 250
boost_delta_res <- list()
dims <- c(116,116,250)
vals <- array(rep(0,116*116*250),dims)
boost_tensor_res <- dtensor(vals)
for (i in 1:S){
pick_sample_asd <- sample(1:12, 12, replace=T)
pick_sample_td <- sample(1:12, 12, replace=T)
boost_asd <- do.call(rbind,asd_sel[pick_sample_asd])
boost_td <- do.call(rbind,td_sel[pick_sample_td])
boost_asd_cor <- cor(boost_asd)
boost_td_cor <- cor(boost_td)
boost_delta <- boost_asd_cor - boost_td_cor
boost_tensor_res[,,i] <- boost_delta
boost_delta_res[[i]] <- boost_delta
if (i%%100 == 0) print(i)
}
myfun_CI <- function(datax, alpha){
# quantile
return(quantile(datax, c(alpha/2, 1-alpha/2)))
}
myfun_CI(rnorm(100000,2,1), 0.005)
for (m in 1:3){
myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), .68)
}
#for (n in 1:250){
#  if (sum(array(boost_tensor_res[,,n],dim=c(116,116)) - boost_delta_res[[n]]) != 0) print(sum(array(x[,,n],dim=c(116,116)) - boost_delta_res[[n]]))
#}
# array(boost_tensor_res[,,n],dim=c(116,116))
myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), .68)
test=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), .68)
test
test[1]
test[2]
test[2]>0
test[2][1]>0
test[2][1]
test[2][1]
test[2][1]
test[2][1]
myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), 1)
myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), 0)
myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), 1)
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), alpha)
alpha=(100-i)/100
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), alpha)
alpha=0.5
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), alpha)
CI[1]
find_p_value <-function(datax,threshold=0){
for (i in 0:100){
alpha=(100-i)/100
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), alpha)
if (CI[1]<0 && CI[2]>0) return (alpha)
}
return (0)
}
find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), .73)
myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), .74)
find_p_value <-function(datax,threshold=0){
for (i in 0:200){
alpha=(200-i)/200
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), alpha)
if (CI[1]<0 && CI[2]>0) return (alpha)
}
return (0)
}
myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), .74)
find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
for (a in 1:6670) find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
for (a in 1:10) find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
for (a in 1:100) find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
for (a in 1:100) find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
find_p_value_2 <-function(datax,threshold=0){
lower=0
upper=1
for (i in 0:32){
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), alpha)
if (CI[1]<0 && CI[2]>0) upper=(upper+lower)/2
else lower=(upper+lower)/2
}
return ((lower+upper)/2)
}
find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
find_p_value_2(array(boost_tensor_res[7,1,],dim=c(116,116)))
find_p_value_2 <-function(datax,threshold=0){
lower=0
upper=1
for (i in 0:32){
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), (lower+upper)/2)
if (CI[1]<0 && CI[2]>0) upper=(upper+lower)/2
else lower=(upper+lower)/2
}
return ((lower+upper)/2)
}
for (a in 1:100) find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
for (a in 1:100) find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
find_p_value_2(array(boost_tensor_res[7,1,],dim=c(116,116)))
find_p_value_2 <-function(datax,threshold=0){
lower=0
upper=1
for (i in 0:32){
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), (lower+upper)/2)
if (CI[1]<0 && CI[2]>0) upper=(upper+lower)/2
else lower=(upper+lower)/2
}
return ((lower+upper)/2)
}
find_p_value_2(array(boost_tensor_res[7,1,],dim=c(116,116)))
find_p_value_2 <-function(datax,threshold=0){
lower=0
upper=1
for (i in 0:32){
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), (lower+upper)/2)
if (CI[1]<0 && CI[2]>0) lower=(upper+lower)/2
else upper=(upper+lower)/2
}
return ((lower+upper)/2)
}
find_p_value(array(boost_tensor_res[7,1,],dim=c(116,116)))
find_p_value_2(array(boost_tensor_res[7,1,],dim=c(116,116)))
find_p_value_2 <-function(datax,threshold=0){
lower=0
upper=1
for (i in 0:16){
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), (lower+upper)/2)
if (CI[1]<0 && CI[2]>0) lower=(upper+lower)/2
else upper=(upper+lower)/2
}
return ((lower+upper)/2)
}
find_p_value_2(array(boost_tensor_res[7,1,],dim=c(116,116)))
find_p_value_2 <-function(datax,threshold=0){
lower=0
upper=1
for (i in 0:16){
CI=myfun_CI(array(boost_tensor_res[7,1,],dim=c(116,116)), (lower+upper)/2)
if (CI[1]<0 && CI[2]>0) lower=(upper+lower)/2
else upper=(upper+lower)/2
}
return ((lower+upper)/2)
}
for (a in 1:100) find_p_value_2(array(boost_tensor_res[7,1,],dim=c(116,116)))
for (a in 1:1000) find_p_value_2(array(boost_tensor_res[7,1,],dim=c(116,116)))
results=rep(0,6670)
results
results[1]=4
results
results=rep(0,6670)
results=rep(0,6670)
i=1
for (a in 1:116) {
for (b in 1:116){
if (a!=b){
results[i]=find_p_value_2(array(boost_tensor_res[a,b,],dim=c(116,116)))
i=i+1
}
}
}
results
find_p_value_2 <-function(datax){
lower=0
upper=1
for (i in 0:16){
CI=myfun_CI(datax, (lower+upper)/2)
if (CI[1]<0 && CI[2]>0) lower=(upper+lower)/2
else upper=(upper+lower)/2
}
return ((lower+upper)/2)
}
results=rep(0,6670)
i=1
for (a in 1:116) {
for (b in 1:116){
if (a!=b){
results[i]=find_p_value_2(array(boost_tensor_res[a,b,],dim=c(116,116)))
i=i+1
}
}
}
results
1:1
1:1
2:1
results=rep(0,6670)
i=1
for (a in 1:116) {
for (b in a:116){
if (a!=b){
results[i]=find_p_value_2(array(boost_tensor_res[a,b,],dim=c(116,116)))
i=i+1
}
}
}
results
length(results)
results.sort
sort(results)
results
sorted_results=sort(results)
sorted_results
find_p_value_2 <-function(datax){
lower=0
upper=1
for (i in 0:32){
CI=myfun_CI(datax, (lower+upper)/2)
if (CI[1]<0 && CI[2]>0) lower=(upper+lower)/2
else upper=(upper+lower)/2
}
return ((lower+upper)/2)
}
results=rep(0,6670)
i=1
for (a in 1:116) {
for (b in a:116){
if (a!=b){
results[i]=find_p_value_2(array(boost_tensor_res[a,b,],dim=c(116,116)))
i=i+1
}
}
}
sorted_results=sort(results)
results
sorted_results
max(1,2)
find_j <-function(data,alpha=0.05){
t_bon=alpha/length(data)
k_max=-1
for (k in 1:length(data)){
if (data[k]< k*t_bon) k_max=k
}
return (k_max)
}
find_j(sorted_results)
0.05/6670
find_j <-function(data,alpha=0.5){
t_bon=alpha/length(data)
k_max=-1
for (k in 1:length(data)){
if (data[k]< k*t_bon) k_max=k
}
return (k_max)
}
find_j(sorted_results)
sorted_results
find_j <-function(data,alpha=0.1){
t_bon=alpha/length(data)
k_max=-1
for (k in 1:length(data)){
if (data[k]< k*t_bon) k_max=k
}
return (k_max)
}
find_j(sorted_results)
find_j <-function(data,alpha=0.2){
t_bon=alpha/length(data)
k_max=-1
for (k in 1:length(data)){
if (data[k]< k*t_bon) k_max=k
}
return (k_max)
}
find_j(sorted_results)
find_j <-function(data,alpha=0.3){
t_bon=alpha/length(data)
k_max=-1
for (k in 1:length(data)){
if (data[k]< k*t_bon) k_max=k
}
return (k_max)
}
find_j(sorted_results)
find_j <-function(data,alpha=0.05){
t_bon=alpha/length(data)
k_max=-1
for (k in 1:length(data)){
if (data[k]< k*t_bon) k_max=k
}
return (k_max)
}
find_j(sorted_results)
matrix(0,ncol=116,nrow=116)
graph_asd[1]
View(asd_matrix)
asd_matrix
asd_cor
TEST_MATRIX=asd_cor
TEST_MATRIX
TEST_MATRIX[1,2]
TEST_MATRIX[1][2]
TEST_MATRIX[1]
TEST_MATRIX[1,2]
TEST_MATRIX[1]
TEST_MATRIX
CI=myfun_CI(datax, (lower+upper)/2)
TEST_MATRIX=asd_matrix
TEST_MATRIX[1,2]
for (a in 1:116) {
for (b in a:116){
if (a!=b){
results[i]=find_p_value_2(array(boost_tensor_res[a,b,],dim=c(116,116)))
TEST_MATRIX[a,b]=results[i]
i=i+1
else TEST_MATRIX[a,b]=0
}
}
}
}
i=1
for (a in 1:116) {
for (b in a:116){
if (a!=b){
results[i]=find_p_value_2(array(boost_tensor_res[a,b,],dim=c(116,116)))
TEST_MATRIX[a,b]=results[i]
i=i+1}
else TEST_MATRIX[a,b]=0
}
}
results=rep(0,6670)
TEST_MATRIX=asd_matrix
i=1
for (a in 1:116) {
for (b in a:116){
if (a!=b){
results[i]=find_p_value_2(array(boost_tensor_res[a,b,],dim=c(116,116)))
TEST_MATRIX[a,b]=results[i]
TEST_MATRIX[b,a]=results[i]
i=i+1}
else TEST_MATRIX[a,b]=0
}
}
sorted_results=sort(results)
TEST_MATRIX
sorted_results=sort(results)
find_j <-function(data,alpha=0.05){
t_bon=alpha/length(data)
k_max=-1
for (k in 1:length(data)){
if (data[k]< k*t_bon) k_max=k
}
return (data[k_max])
}
find_j(sorted_results)
j=find_j(sorted_results)
t_bh=find_j(sorted_results)
for (a in 1:116){
for (b in 1:116){
if (a!=b){
if (TEST_MATRIX[a,b]<=t_bh) TEST_MATRIX[a,b]=1
else TEST_MATRIX[a,b]=0
}
}
}
TEST_MATRIX
sum(TEST_MATRIX)
find_j <-function(data,alpha=0.05){
t_bon=alpha/length(data)
k_max=-1
for (k in 1:length(data)){
if (data[k]< k*t_bon) k_max=k
}
return (data[k_max])
}
t_bh=find_j(sorted_results)
sorted_results
results=rep(0,6670)
TEST_MATRIX=asd_matrix
i=1
for (a in 1:116) {
for (b in a:116){
if (a!=b){
results[i]=find_p_value_2(array(boost_tensor_res[a,b,],dim=c(116,116)))
TEST_MATRIX[a,b]=results[i]
TEST_MATRIX[b,a]=results[i]
i=i+1}
else TEST_MATRIX[a,b]=0
}
}
sorted_results=sort(results)
find_j <-function(data,alpha=0.05){
t_bon=alpha/length(data)
k_max=-1
for (k in 1:length(data)){
if (data[k]< k*t_bon) k_max=k
}
return (data[k_max])
}
t_bh=find_j(sorted_results)
for (a in 1:116){
for (b in 1:116){
if (a!=b){
if (TEST_MATRIX[a,b]<=t_bh) TEST_MATRIX[a,b]=1
else TEST_MATRIX[a,b]=0
}
}
}
sum(TEST_MATRIX)
t_bh
TEST_MATRIX
results=rep(0,6670)
TEST_MATRIX=asd_matrix
i=1
for (a in 1:116) {
for (b in a:116){
if (a!=b){
results[i]=find_p_value_2(array(boost_tensor_res[a,b,],dim=c(116,116)))
TEST_MATRIX[a,b]=results[i]
TEST_MATRIX[b,a]=results[i]
i=i+1}
else TEST_MATRIX[a,b]=0
}
}
sorted_results=sort(results)
find_j <-function(data,alpha=0.05){
t_bon=alpha/length(data)
k_max=-1
for (k in 1:length(data)){
if (data[k]< k*t_bon) k_max=k
}
return (data[k_max])
}
t_bh=find_j(sorted_results)
for (a in 1:116){
for (b in a:116){
if (a!=b){
if (TEST_MATRIX[a,b]<=t_bh) TEST_MATRIX[a,b]=1
else TEST_MATRIX[a,b]=0
}
}
}
TEST_MATRIX
sum(TEST_MATRIX)
